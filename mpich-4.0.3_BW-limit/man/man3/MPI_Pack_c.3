.TH MPI_Pack_c 3 "11/8/2022" " " "MPI"
.SH NAME
MPI_Pack_c \-  Packs a datatype into contiguous memory 
.SH SYNOPSIS
.nf
int MPI_Pack_c(const void *inbuf, MPI_Count incount, MPI_Datatype datatype, void *outbuf,
MPI_Count outsize, MPI_Count *position, MPI_Comm comm)
.fi
.SH INPUT PARAMETERS
.PD 0
.TP
.B inbuf 
- input buffer start (choice) (choice)
.PD 1
.PD 0
.TP
.B incount 
- number of input data items (non-negative integer) (non-negative integer)
.PD 1
.PD 0
.TP
.B datatype 
- datatype of each input data item (handle) (handle)
.PD 1
.PD 0
.TP
.B outsize 
- output buffer size, in bytes (non-negative integer) (non-negative integer)
.PD 1
.PD 0
.TP
.B comm 
- communicator for packed message (handle) (handle)
.PD 1

.SH INPUT/OUTPUT PARAMETERS
.PD 0
.TP
.B position 
- current position in buffer, in bytes (integer) (integer)
.PD 1

.SH OUTPUT PARAMETERS
.PD 0
.TP
.B outbuf 
- output buffer start (choice) (choice)
.PD 1

.SH NOTES (FROM THE SPECIFICATIONS)
The input value of position is the first location in the output buffer to be
used for packing.  position is incremented by the size of the packed message,
and the output value of position is the first location in the output buffer
following the locations occupied by the packed message.  The comm argument is
the communicator that will be subsequently used for sending the packed
message.

.SH THREAD AND INTERRUPT SAFETY

This routine is thread-safe.  This means that this routine may be
safely used by multiple threads without the need for any user-provided
thread locks.  However, the routine is not interrupt safe.  Typically,
this is due to the use of memory allocation routines such as 
.I malloc
or other non-MPICH runtime routines that are themselves not interrupt-safe.

.SH NOTES FOR FORTRAN
All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
) have
an additional argument 
.I ierr
at the end of the argument list.  
.I ierr
is an integer and has the same meaning as the return value of the routine
in C.  In Fortran, MPI routines are subroutines, and are invoked with the
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type 
.I INTEGER
in Fortran.

.SH ERRORS

All MPI routines (except 
.I MPI_Wtime
and 
.I MPI_Wtick
) return an error value;
C routines as the value of the function and Fortran routines in the last
argument.  Before the value is returned, the current MPI error handler is
called.  By default, this error handler aborts the MPI job.  The error handler
may be changed with 
.I MPI_Comm_set_errhandler
(for communicators),
.I MPI_File_set_errhandler
(for files), and 
.I MPI_Win_set_errhandler
(for
RMA windows).  The MPI-1 routine 
.I MPI_Errhandler_set
may be used but
its use is deprecated.  The predefined error handler
.I MPI_ERRORS_RETURN
may be used to cause error values to be returned.
Note that MPI does 
.B not
guarantee that an MPI program can continue past
an error; however, MPI implementations will attempt to continue whenever
possible.

.PD 0
.TP
.B MPI_SUCCESS 
- No error; MPI routine completed successfully.
.PD 1

.PD 0
.TP
.B MPI_ERR_ARG 
- Invalid argument.  Some argument is invalid and is not
identified by a specific error class (e.g., 
.I MPI_ERR_RANK
).
.PD 1
.PD 0
.TP
.B MPI_ERR_COMM 
- Invalid communicator.  A common error is to use a null
communicator in a call (not even allowed in 
.I MPI_Comm_rank
).
.PD 1
.PD 0
.TP
.B MPI_ERR_COUNT 
- Invalid count argument.  Count arguments must be 
non-negative; a count of zero is often valid.
.PD 1
.PD 0
.TP
.B MPI_ERR_TYPE 
- Invalid datatype argument.  Additionally, this error can
occur if an uncommitted MPI_Datatype (see 
.I MPI_Type_commit
) is used
in a communication call.
.PD 1
.PD 0
.TP
.B MPI_ERR_OTHER 
- Other error; use 
.I MPI_Error_string
to get more information
about this error code. 
.PD 1

