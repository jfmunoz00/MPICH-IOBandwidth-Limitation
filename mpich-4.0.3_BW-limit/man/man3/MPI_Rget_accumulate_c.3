.TH MPI_Rget_accumulate_c 3 "11/8/2022" " " "MPI"
.SH NAME
MPI_Rget_accumulate_c \-  Perform an atomic, one-sided read-and-accumulate 
.SH SYNOPSIS
.nf
int MPI_Rget_accumulate_c(const void *origin_addr, MPI_Count origin_count,
MPI_Datatype origin_datatype, void *result_addr, MPI_Count result_count,
MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp,
MPI_Count target_count, MPI_Datatype target_datatype, MPI_Op op,
MPI_Win win, MPI_Request *request)
.fi
.SH INPUT PARAMETERS
.PD 0
.TP
.B origin_addr 
- initial address of buffer (choice) (choice)
.PD 1
.PD 0
.TP
.B origin_count 
- number of entries in origin buffer (non-negative integer) (non-negative integer)
.PD 1
.PD 0
.TP
.B origin_datatype 
- datatype of each entry in origin buffer (handle) (handle)
.PD 1
.PD 0
.TP
.B result_count 
- number of entries in result buffer (non-negative integer) (non-negative integer)
.PD 1
.PD 0
.TP
.B result_datatype 
- datatype of entries in result buffer (handle) (handle)
.PD 1
.PD 0
.TP
.B target_rank 
- rank of target (non-negative integer) (non-negative integer)
.PD 1
.PD 0
.TP
.B target_disp 
- displacement from start of window to beginning of target buffer (non-negative integer) (non-negative integer)
.PD 1
.PD 0
.TP
.B target_count 
- number of entries in target buffer (non-negative integer) (non-negative integer)
.PD 1
.PD 0
.TP
.B target_datatype 
- datatype of each entry in target buffer (handle) (handle)
.PD 1
.PD 0
.TP
.B op 
- reduce operation (handle) (handle)
.PD 1
.PD 0
.TP
.B win 
- window object (handle) (handle)
.PD 1

.SH OUTPUT PARAMETERS
.PD 0
.TP
.B result_addr 
- initial address of result buffer (choice) (choice)
.PD 1
.PD 0
.TP
.B request 
- RMA request (handle) (handle)
.PD 1

.SH NOTES
This operations is atomic with respect to other "accumulate" operations.

The get and accumulate steps are executed atomically for each basic element in
the datatype (see MPI 3.0 Section 11.7 for details). The predefined operation
.I MPI_REPLACE
provides fetch-and-set behavior.

The basic components of both the origin and target datatype must be the same
predefined datatype (e.g., all 
.I MPI_INT
or all 
.I MPI_DOUBLE_PRECISION
).

.SH NOTES FOR FORTRAN
All MPI routines in Fortran (except for 
.I MPI_WTIME
and 
.I MPI_WTICK
) have
an additional argument 
.I ierr
at the end of the argument list.  
.I ierr
is an integer and has the same meaning as the return value of the routine
in C.  In Fortran, MPI routines are subroutines, and are invoked with the
.I call
statement.

All MPI objects (e.g., 
.I MPI_Datatype
, 
.I MPI_Comm
) are of type 
.I INTEGER
in Fortran.

.SH ERRORS

All MPI routines (except 
.I MPI_Wtime
and 
.I MPI_Wtick
) return an error value;
C routines as the value of the function and Fortran routines in the last
argument.  Before the value is returned, the current MPI error handler is
called.  By default, this error handler aborts the MPI job.  The error handler
may be changed with 
.I MPI_Comm_set_errhandler
(for communicators),
.I MPI_File_set_errhandler
(for files), and 
.I MPI_Win_set_errhandler
(for
RMA windows).  The MPI-1 routine 
.I MPI_Errhandler_set
may be used but
its use is deprecated.  The predefined error handler
.I MPI_ERRORS_RETURN
may be used to cause error values to be returned.
Note that MPI does 
.B not
guarantee that an MPI program can continue past
an error; however, MPI implementations will attempt to continue whenever
possible.

.PD 0
.TP
.B MPI_SUCCESS 
- No error; MPI routine completed successfully.
.PD 1

.PD 0
.TP
.B MPI_ERR_ARG 
- Invalid argument.  Some argument is invalid and is not
identified by a specific error class (e.g., 
.I MPI_ERR_RANK
).
.PD 1
.PD 0
.TP
.B MPI_ERR_BUFFER 
- Invalid buffer pointer.  Usually a null buffer where
one is not valid.
.PD 1
.PD 0
.TP
.B MPI_ERR_COUNT 
- Invalid count argument.  Count arguments must be 
non-negative; a count of zero is often valid.
.PD 1
.PD 0
.TP
.B MPI_ERR_DISP 
- 
.PD 1
.PD 0
.TP
.B MPI_ERR_RANK 
- Invalid source or destination rank.  Ranks must be between
zero and the size of the communicator minus one; ranks in a receive
(
.I MPI_Recv
, 
.I MPI_Irecv
, 
.I MPI_Sendrecv
, etc.) may also be 
.I MPI_ANY_SOURCE
\&.

.PD 1
.PD 0
.TP
.B MPI_ERR_TYPE 
- Invalid datatype argument.  Additionally, this error can
occur if an uncommitted MPI_Datatype (see 
.I MPI_Type_commit
) is used
in a communication call.
.PD 1
.PD 0
.TP
.B MPI_ERR_WIN 
- Invalid MPI window object
.PD 1
.PD 0
.TP
.B MPI_ERR_OTHER 
- Other error; use 
.I MPI_Error_string
to get more information
about this error code. 
.PD 1

.SH SEE ALSO
MPI_Get_accumulate MPI_Fetch_and_op
.br
